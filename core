#!/usr/bin/env bash
set -o errtrace
set -euo pipefail

export LC_CTYPE=C
export LC_ALL=C
export LANG=C

# make sure their base version is correct
[[ "${BASH_VERSINFO[0]}" -ge 4 ]] || { echo "Bash version must be 4 or greater"; exit 1; }

# find the location of core, regardless of where on the system it is.
[[ -L "${BASH_SOURCE[0]}" ]] && _core_repo="$(cd "$(dirname "$(readlink "${BASH_SOURCE[0]}")")/" && pwd -P)" || _core_repo="$(cd "$(dirname "${BASH_SOURCE[0]}")/" && pwd -P)"

# help with debugging
if "${CORE_DEBUG:-false}"; then
  BASH_XTRACEFD="5"
  export PS4='(${BASH_SOURCE##*/}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  set -x
fi

# make sure an option was passed, don't spend time doing anything else unless there are options
[[ $# -eq 0 ]] && { echo "Error: no options passed"; exit 127; }

# declare itself
_self="$0"

# Always import from the core repo, even when functioning from another repo
# shellcheck disable=SC2034
_repo_alias=${_core_repo##*/}
_curr_repo=${_core_repo}
REPO="${_core_repo}"
# shellcheck disable=SC1090
source "${_core_repo}/lib/main.sh"

pushd "${_core_repo}" &>/dev/null
# Setup core git-hooks for main repo
git config core.hooksPath >/dev/null || git config core.hooksPath "${_core_repo}/git-hooks" >/dev/null
popd &>/dev/null

# Are we currently in a git repo, that is not core? 
if git rev-parse --show-toplevel &> /dev/null; then
  _curr_repo=$(git rev-parse --show-toplevel)
  if [[ "${_curr_repo}" != "${_core_repo}" ]] && [[ -f "${_curr_repo}/.core_enabled" ]]; then 
    REPO="${_curr_repo}"
    # shellcheck disable=SC2034
    _repo_alias=${_curr_repo##*/}
    grep -qxF "${_curr_repo}" "${_core_repo}/.core_repos" 2>/dev/null || echo "${_curr_repo}" >> "${_core_repo}/.core_repos"
    import "${_curr_repo}/core/lib"
  fi
fi

# Set the operating system variable for mac or linux
# shellcheck disable=SC2034
OS=$(_os::check)

# Keep track of the calling directory
PWD=$(pwd)

# work from the top of the reference repo
cd "${REPO}"

# if we are in a repo other than core and git-hooks exist, then configure them
if [[ "${_curr_repo}" != "${_core_repo}" ]] && [[ -d "${_curr_repo}/core/git-hooks" ]]; then
  git config core.hooksPath >/dev/null || git config core.hooksPath "${_curr_repo}/core/git-hooks" >/dev/null
fi

# do we need to provide help?
if [[ "$*" =~ "--help" ]]; then
  _Help::Help "${@}"
  exit 0
elif [[ "$*" =~ "--fzf" ]]; then
  # Generate fzf history list
  _Help::Fzf "${@}"
  exit 0
fi

# check the input
if [[ $(type -t "${1}") == "function" ]]; then
  func=$(_Help::Input_count "${1}")
  OLDIFS=$IFS; IFS=':' read -r -a count <<< "${func}"; IFS=${OLDIFS}
  if [[ "${count[0]}" == "${#}" ]] || [[ "${count[1]}" == "${#}" ]] || [[ "${count[2]}" == "99" ]] && [[ "${#}" -ge "${count[0]}" ]]; then
    _History::Add "${@}"
    eval "${@}"
  else
    _Help::Autohelp "${1}"
  fi
else
  if type fzf &>/dev/null || type fzy &>/dev/null || type gof &>/dev/null; then
    if [[ $(${_self} "${1}" --fzf &>/dev/null; echo $?) == 0 ]]; then
      if type fzf &>/dev/null; then
        option=$(${_self} "${1}" --fzf | fzf --no-preview --no-sort -1)
      elif type fzy &>/dev/null; then
        option=$(${_self} "${1}" --fzf | fzy -l 100)
      elif type gof &>/dev/null; then
        option=$(${_self} "${1}" --fzf | gof)
      fi
      func=$(_Help::Input_count "${option}")
      OLDIFS=$IFS; IFS=':' read -r -a count <<< "${func}"; IFS=${OLDIFS}
      if [[ "${count[0]}" == "${#}" ]] || [[ "${count[1]}" == "${#}" ]] || [[ "${count[2]}" == "99" ]] && [[ "${#}" -ge "${count[0]}" ]]; then 
        _History::Add "${option}" "${@:2}"
        eval "${option}" "${@:2}"
      else
        _Help::Autohelp "${option}"
      fi
    else
      _Log::Die 127 "Unknown Command"
    fi
  else
    _Log::Die 127 "Unknown Command"
  fi
fi