#!/usr/bin/env bash
#set -o errtrace
set -o pipefail
# make sure their base version is correct
[[ "${BASH_VERSINFO[0]}" -ge 4 ]] || { echo "Bash version must be 4 or greater"; exit 1; }

# find the location of core, regardless of where on the system it is.
[[ -L "${BASH_SOURCE[0]}" ]] && _core_repo="$(cd "$(dirname $(readlink "${BASH_SOURCE[0]}"))/" && pwd -P)" || _core_repo="$(cd "$(dirname "${BASH_SOURCE[0]}")/" && pwd -P)"

# help with debugging
export PS4='+(${BASH_SOURCE##*/}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'

# make sure an option was passed, don't spend time doing anything else unless there are options
[[ $# -eq 0 ]] && { echo "Error: no options passed"; exit 1; }

# Are we currently in a git repo?
if git rev-parse --show-toplevel &> /dev/null; then
  _curr_repo=$(git rev-parse --show-toplevel)
fi

# Keep track of the calling directory
PWD=$(pwd)

# if we are in the core repo, make everything function from here
if [[ -z ${_curr_repo} ]] || [[ ${_curr_repo} == ${_core_repo} ]]; then
  REPO="${_core_repo}"
else
  # Allow core to function on other repos, as long as core is enabled on that repo
  if [[ -f "${_curr_repo}/.core_enabled" ]]; then
    REPO="${_curr_repo}"
  else
    REPO="${_core_repo}"
  fi
fi

# Always import from the core repo, even when functioning from another repo
source "${_core_repo}/lib/main.sh"
_self="$0"

# Keep track of the calling directory
PWD=$(pwd)

# work from the top of the reference repo
cd ${REPO}

# do we need to provide help?
if [[ "$@" =~ "--help" ]]; then
  _Help::Help "${@}"
  exit
elif [[ "$@" =~ "--fzf" ]]; then
  # Generate fzf history list
  _Help::Fzf "${@}"
  exit
fi

# check the input
if [[ $(type -t "${1}") == "function" ]]; then
  func=$(_Help::Input_count "${1}")
  OLDIFS=$IFS; IFS=':' read -a count <<< "${func}"; IFS=${OLDIFS}
  if [[ "${count[0]}" == "${#}" ]] || [[ "${count[1]}" == "${#}" ]] || [[ "${count[2]}" == "99" ]] && [[ "${#}" -ge "${count[0]}" ]]; then
    _History::Add "${@}"
    eval "${@}"
  else
    _Help::Autohelp "${1}"
  fi
else
  if type fzf &>/dev/null; then
    if [[ $(${_self} ${1} --fzf &>/dev/null; echo $?) == 0 ]]; then
      option=$(${_self} ${1} --fzf | fzf --no-preview --no-sort -1)
      func=$(_Help::Input_count "${option}")
      OLDIFS=$IFS; IFS=':' read -a count <<< "${func}"; IFS=${OLDIFS}
      if [[ "${count[0]}" == "${#}" ]] || [[ "${count[1]}" == "${#}" ]] || [[ "${count[2]}" == "99" ]] && [[ "${#}" -ge "${count[0]}" ]]; then 
        _History::Add "${option}" "${@:2}"
        eval "${option}" "${@:2}"
      else
        _Help::Autohelp "${option}"
      fi
    else
      _Log::Die 1 "Unknown Command"
    fi
  else
    _Log::Die 1 "Unknown Command"
  fi
fi